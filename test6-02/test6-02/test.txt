2.1流与标准流
2.1.1流
         我们程序的数据需要输出到各种外部设备，也需要从外部设备获取数据，不同的外部设备的输⼊输出 操作各不相同，为了⽅便程序员对各种设备进⾏⽅便的操作，我们抽象出了流的概念，我们可以把流 想象成流淌着字符的河。

         C程序针对⽂件、画⾯、键盘等的数据输⼊输出操作都是通过流操作的。 ⼀般情况下，我们要想向流⾥写数据，或者从流中读取数据，都是要打开流，然后操作。

         其实简单来想，通俗一点的来说流就像我们用的水桶，你要给他装水时把盖子打开，装满或不用时将其关闭（水桶没盖子的情况不讨论）

2.1.2标准流
C语⾔程序在启动的时候，默认打开了3个流：

• stdin - 标准输⼊流，在⼤多数的环境中从键盘输⼊，scanf函数就是从标准输⼊流中读取数据。

• stdout - 标准输出流，⼤多数的环境中输出⾄显⽰器界⾯，printf函数就是将信息输出到标准输出 流中。

• stderr - 标准错误流，⼤多数环境中输出到显⽰器界⾯。 这是默认打开了这三个流，我们使⽤scanf、printf等函数就可以直接进⾏输⼊输出操作的。 stdin、stdout、stderr 三个流的类型是： FILE * ，通常称为⽂件指针。

所以，在c语言中，我们需要使用FILE*的指针来对流进行各种维护操作。

2.2文件的打开与关闭
在了解文件的打开与关闭之前，让我们先来了解一下只读与只写：

只读与只写的定义是：

         只读：这种状态下的文件或对象允许用户读取其内容，但不允许用户对其进行修改或删除。这意味着用户可以查看文件的内容，但不能对其进行任何更改。在文件系统中，只读权限通常通过设置文件权限或修改文件属性来实现。这种权限的目的是保护文件内容不被意外修改，确保数据的完整性和安全性。

         只写：与只读相反，只写状态的文件或对象允许用户对其进行修改或删除，但不允许用户读取其内容。这表示用户可以更改或删除文件，但不能查看文件的具体内容。这种权限通常用于需要保密的修改操作，例如在特定情况下允许用户对文件进行编辑，但不允许查看其原始内容。

         以博主自己的了解，在我们的c语言编程过程中，只读其实就是给你一个文件，我们可以通过程序来观察文件里面的内容，而不可以对文件进行修改。其次，只写恰好相反，它允许我们读取文件中的内容，但不允许我们对文件的内容进行修改。

那么在c语言中，我们有以下几种方式改变对文件的打开方式，具体如下图所示：
————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
                        
原文链接：https://blog.csdn.net/xiuwoaiailixiya/article/details/139327239